     #Exercice animaux


CREATE TABLE animal 
(
     id INTEGER primary key auto_increment not null,
     nom VARCHAR(255),
     id_espece INTEGER
);

CREATE TABLE espece 
(
     id INTEGER primary key auto_increment not null,
     nom VARCHAR(255)
);

CREATE TABLE nourriture 
(
     id INTEGER primary key auto_increment not null,
     nom VARCHAR(255)
);

CREATE TABLE pays 
(
     id INTEGER primary key auto_increment not null,
     nom VARCHAR(255)
);


CREATE TABLE animal_nourriture 
(
     id INTEGER primary key auto_increment not null,
     id_animal INTEGER,
     id_nourriture INTEGER
);


CREATE TABLE animal_pays 
(
     id INTEGER primary key auto_increment not null,
     id_animal INTEGER,
     id_pays INTEGER
);

INSERT INTO animal ( nom ) VALUES 
( 'pirhana' ), ('pangolin'), ('python'), ('paon'),
('chat'), ('cochon'), ('corbeau'),  ('carpe'), ('caméléon'),  ('cigale'), 
('fourmis'),  ('souris'),  ('fourmilier'),  ('ornythorinque'),
('polatouche'),  ('chien');

INSERT INTO espece ( nom ) VALUES ('mammifère'), ('insecte'), 
('reptile'), ('poisson'), ('amphibien'), ('oiseau') ;

INSERT INTO nourriture ( nom ) VALUES 
('viande'), ('herbe'), ('graine'), ('croquette'), ('fruit'), ('vers'), 
('insectes'), ('fourmis'), ('os');

INSERT INTO pays ( nom ) VALUES 
 ('france'), ('australie'), ('indes'), ('chine'), ('congo'), 
 ('italie'), ('espagne'), ('afrique du sud'), ('brésil'), ('USA');

 UPDATE  animal SET id_espece=4 WHERE id=1 or id=8;
UPDATE  animal SET id_espece=1 WHERE id=2 or id=5 or id=6 or id>=12 ;
UPDATE  animal SET id_espece=3 WHERE id=3 or id=9 ;
UPDATE  animal SET id_espece=6 WHERE id=4 or id=7 ;
UPDATE  animal SET id_espece=2 WHERE id_espece is null ;


select
animal.nom as animal,
espece.nom as espece
from
animal,
espece
where
animal.id_espece=espece.id;

SELECT
     animal.nom as nom,
     espece.nom as espece
FROM
    animal,
    espece
WHERE
    animal.id_espece=espece.id;



SELECT
     animal.nom as nom,
     espece.nom as espece
FROM animal
LEFT JOIN espece ON animal.id_espece=espece.id;


SELECT
     espece.nom as espece,
     animal.nom as nom
FROM espece
LEFT JOIN animal ON animal.id_espece=espece.id;


INSERT INTO animal_nourriture ( id_animal, id_nourriture ) VALUES 
( 1, 1), (2, 2), (3, 1), (3,7), (5,1), (4,3), (4,2), (5,4), (5,2), 
(7,1), (7,5), (7,3), (8,1), (9,6), (10,1), (10,2), (11,2),
 (11, 8), (14,1), (15, 2), (16, 1), (16, 9), (16, 4);


 SELECT
    animal.nom,
    espece.nom as espece,
    nourriture.nom as nourriture,
    pays.nom as pays
FROM animal
LEFT JOIN animal_nourriture ON animal_nourriture.id_animal=animal.ID
LEFT JOIN nourriture ON animal_nourriture.id_nourriture=nourriture.ID
left join espece on animal.id_espece=espece.id
left join animal_pays on animal_pays.id_animal=animal.id
left join pays on animal_pays.id_pays=pays.id;


insert into animal_pays (id_animal, id_pays) values (1,9), (1,10), (2,4), (3,9), (4,1), (5,1), (5,2), (5,4), (5,6), (7,1);


ALTER TABLE animal 
ADD CONSTRAINT id_espece 
FOREIGN KEY(  id_espece  ) REFERENCES espece( id );


alter table animal_pays
add constraint id_pays
foreign key (id_pays) references pays(id);


alter table animal_nourriture add note integer;


update animal_nourriture  SET note=9   where id=1;
update animal_nourriture  SET note=6   where id=2;
update animal_nourriture  SET note=2   where id=3;
update animal_nourriture  SET note=1   where id=4;
update animal_nourriture  SET note=9   where id=5;
update animal_nourriture  SET note=5   where id=6;
update animal_nourriture  SET note=8   where id=7;
update animal_nourriture  SET note=9   where id=8;
update animal_nourriture  SET note=6   where id=9;
update animal_nourriture  SET note=7   where id=10;
update animal_nourriture  SET note=7   where id=11;
update animal_nourriture  SET note=8   where id=12;
update animal_nourriture  SET note=9   where id=13;
update animal_nourriture  SET note=1   where id=14;
update animal_nourriture  SET note=1   where id=15;
update animal_nourriture  SET note=3   where id=16;
update animal_nourriture  SET note=2   where id=17;
update animal_nourriture  SET note=4   where id=18;
update animal_nourriture  SET note=5   where id=19;
update animal_nourriture  SET note=9   where id=20;
update animal_nourriture  SET note=9   where id=21;
update animal_nourriture  SET note=6   where id=22;
update animal_nourriture  SET note=2   where id=23; 

SELECT
    animal.nom,
    nourriture.nom as nourriture, 
    animal_nourriture.note,
    espece.nom as espece
FROM animal_nourriture
LEFT JOIN animal ON animal_nourriture.id_animal=animal.ID
LEFT JOIN nourriture ON animal_nourriture.id_nourriture=nourriture.ID
left join espece on animal.id_espece=espece.id
WHERE animal_nourriture.note >= 5
order by note;






     #Exercice bibliothèque


CREATE DATABASE bibliotheque;
USE bibliotheque;

CREATE TABLE emprunteur (
     id INT primary key auto_increment not null,
     nom VARCHAR(255) not null
);

CREATE TABLE etat (
     id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
     valeur VARCHAR(255)
);

CREATE TABLE livre (
     id INT primary key auto_increment not null,
     titre VARCHAR(255),
     id_etat INTEGER,
     CONSTRAINT FK_id_etat FOREIGN KEY (id_etat) REFERENCES etat(id)
);

# table de liaison:
CREATE TABLE emprunter (
     id INT primary key auto_increment not null,
     id_livre INT not null,
     id_emprunteur INT not null,
     date_emprunt TIMESTAMP not null,
     date_retour TIMESTAMP,
     CONSTRAINT FK_id_emprunterlivre FOREIGN KEY (id_livre) REFERENCES livre(id),
     CONSTRAINT FK_id_emprunteur FOREIGN KEY (id_emprunteur) REFERENCES emprunteur(id)
);

CREATE TABLE auteur (
     id INT primary key auto_increment not null,
     nom VARCHAR(255) not null
);

# table de liaison:
create table ecrire (
     id INT primary key auto_increment not null,
     id_livre int,
     id_auteur int,
     CONSTRAINT FK_id_ecrirelivre FOREIGN KEY (id_livre) REFERENCES livre(id),
     CONSTRAINT FK_id_auteur FOREIGN KEY (id_auteur) REFERENCES auteur(id)
);


# Ajouter deux emprunteurs et deux livres et les differents etats du livre.
INSERT INTO emprunteur (nom) VALUES
     ('toto'), ('tata');
INSERT INTO livre (titre) VALUES 
     ('La Peau de chagrin'), ('Assomoir');
INSERT INTO etat (valeur) VALUES
     ('Neuf'), ('Bon'), ('Mauvais') ,('Très mauvais');
INSERT INTO livre (titre, id_etat) VALUES 
     ('Le Seigneur des Anneaux',2), ('Harry Potter',4), ('Orgueil et préjugés',3);
INSERT INTO auteur (nom) VALUES 
     ('balzac'), ('zola'),
     ('Tolkien'), ('Rowling'), ('Austen');

# Emprunteur 'tata' fait un emprunt du livre 'La Peau de chagrin' et de 'Harry Potter'.   
SELECT * FROM livre;
SELECT * FROM emprunteur;
INSERT INTO emprunter (id_livre, id_emprunteur, date_emprunt) VALUES 
     (1,2, CURRENT_TIMESTAMP);
INSERT INTO emprunter (id_livre, id_emprunteur, date_emprunt) VALUES 
     (4,2, CURRENT_TIMESTAMP);
SELECT * FROM emprunter;
# Emprunteur rend le livre
UPDATE emprunter SET date_retour=CURRENT_TIMESTAMP WHERE id_livre=1 and id_emprunteur=2;
SELECT * FROM emprunter;

# balzac a ecrit la peau de chagrin et zola a ecrit l assomoir, etc
SELECT * FROM livre;
SELECT * FROM auteur;
INSERT INTO ecrire (id_livre, id_auteur) VALUES 
     (1,1), (2,2), (3,3), (4,4), (5,5);
SELECT * FROM ecrire;

# Mettre à jour l état du livre de balzac
UPDATE livre SET id_etat=2 WHERE titre='La Peau de chagrin';
# Ou, mettre etat 'neuf' pour tous les livres pour lesquels il n y a pas d etat (car ils viennent d etre achetes par la bilbiotheque par exemple).
UPDATE livre SET id_etat=1 WHERE id_etat is null;

# Afficher la liste des emprunts effectues.
SELECT 
     emprunteur.nom as client,
     livre.titre as choix,
     emprunter.date_emprunt as dateEmprunt,
     emprunter.date_retour as dateRetour,
     auteur.nom as auteur,
     etat.valeur as etatDuLivre
FROM
     livre
LEFT JOIN emprunter ON livre.id=emprunter.id_livre
LEFT JOIN emprunteur ON emprunteur.id=emprunter.id_emprunteur
LEFT JOIN ecrire ON livre.id=ecrire.id_livre
LEFT JOIN auteur ON auteur.id=ecrire.id_auteur
LEFT JOIN etat ON livre.id_etat=etat.id
;
